#!/usr/bin/env python3
import os
from datetime import datetime

DENO_CONFIG = ['--config', 'deno.json']
DENO_IMPORT_MAP = ['--import-map', 'src/import_map.json']
BACK_ENV = dict(
    os.environ,
    VENUE_DB_USER='postgres',
    VENUE_DB_PASSWORD='postgres',
    VENUE_DB_NAME='postgres',
    VENUE_DB_HOST='127.0.0.1',
    VENUE_VISITOR_COOKIE_SECRET='secret',
    VENUE_BRAND_NAME='Venue DEV',
    VENUE_BRAND_IMAGE='http://localhost:8001/brand.png',
    VENUE_ADMIN_USERNAME='admin',
    VENUE_ADMIN_PASSWORD='admin',
)


def cli():

    @command
    def run():
        cmd('deno', 'run', *DENO_CONFIG, *DENO_IMPORT_MAP,
            '-A', 'src/main.ts', cwd='back', env=BACK_ENV)

    @command
    def fmt():
        cmd('deno', 'fmt', *DENO_CONFIG, cwd='back')

    @command
    def lint():
        cmd('deno', 'lint', *DENO_CONFIG, cwd='back')

    def compose(*args, **kwargs):
        cmd('docker-compose',
            '--project-name', 'venue',
            *args, **kwargs, cwd='docker')

    def devenv(*args):
        compose('-f', 'docker-compose.devenv.yml', *args)

    @command
    def devenv_up():
        devenv('up', '-d')

    @command
    def devenv_down():
        devenv('down')

    @command
    def devenv_psql():
        devenv('exec', 'db', 'psql', '-U', 'postgres')

    command(devenv)
    command(compose)

    def e2e(*args):
        cmd('npm', 'exec', *args, cwd='e2e',
            # https://github.com/webpack/webpack/issues/14532#issuecomment-947012063
            env=dict(os.environ, NODE_OPTIONS='--openssl-legacy-provider'))

    @command
    def e2e_open():
        e2e('cypress', 'open')
    
    @command
    def e2e_run():
        e2e('cypress', 'run')

    @command
    def build():
        cmd('rm', '-rf', 'dist')
        cmd('mkdir', '-p', 'dist')
        cmd('deno', 'compile', *DENO_CONFIG, *DENO_IMPORT_MAP,
            '-A', '--output', '../dist/venue', './src/main.ts', cwd='back')
        cmd('cp', '-r', 'resources', '../dist/resources', cwd='back')

    @command
    def build_docker():
        compose('-f', 'docker-compose.build.yml', 'build', env=dict(
            os.environ,
            VENUE_TAG='dev'
        ))

    @command
    def publish_docker():
        version = datetime.now().strftime("%Y%m%d_%H%M%S")
        compose('-f', 'docker-compose.build.yml', 'build', env=dict(
            os.environ,
            VENUE_TAG=datetime.now().strftime("%Y%m%d_%H%M%S")
        ))
        cmd('docker', 'push', f'sirikon/venue:{version}')





# fmt: off
# https://gist.github.com/sirikon/d4327b6cc3de5cc244dbe5529d8f53ae
import inspect, sys, os, subprocess; os.chdir(os.path.dirname(__file__));commands = []
def cmd(*args, **kwargs): subprocess.run(args, **kwargs, check=True)
def spec(f): return inspect.getfullargspec(f)
def command(func): commands.append(func); return func
cli(); args = sys.argv[1:]
if len(args) == 0: print("Available commands:"); [print(' '.join([
    f' {f.__name__}',
    *[f'<{a}>' for a in spec(f).args],
    *([f'<...{spec(f).varargs}>'] if spec(f).varargs is not None else [])
])) for f in commands]; exit(0)
matching_commands = [f for f in commands if f.__name__ == args[0]]
if len(matching_commands) == 0: print(f'Unknown command "{args[0]}"');sys.exit(1)
try: matching_commands[0](*args[1:])
except KeyboardInterrupt: pass
except subprocess.CalledProcessError as err: sys.exit(err.returncode)
